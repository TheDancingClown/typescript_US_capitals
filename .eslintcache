[{"/Users/louis/Programming/uscapitals/src/App.tsx":"1","/Users/louis/Programming/uscapitals/src/components/Map.tsx":"2","/Users/louis/Programming/uscapitals/src/reportWebVitals.ts":"3","/Users/louis/Programming/uscapitals/src/components/MapChart.tsx":"4","/Users/louis/Programming/uscapitals/src/index.tsx":"5"},{"size":190,"mtime":1612383261777,"results":"6","hashOfConfig":"7"},{"size":254,"mtime":1612561416441,"results":"8","hashOfConfig":"7"},{"size":425,"mtime":1612364241352,"results":"9","hashOfConfig":"7"},{"size":2413,"mtime":1612561388634,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1612364241350,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1671bok",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/louis/Programming/uscapitals/src/App.tsx",[],["24","25"],"/Users/louis/Programming/uscapitals/src/components/Map.tsx",["26"],"/Users/louis/Programming/uscapitals/src/reportWebVitals.ts",[],"/Users/louis/Programming/uscapitals/src/components/MapChart.tsx",["27","28"],"import React from \"react\";\nimport { geoCentroid } from \"d3-geo\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\n\nimport allStates from \"../data/allstates.json\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets: any = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nconst MapChart = () => {\n\n  const handleClick = () => {\n    //fetch data\n    //show data\n  };\n\n  return (\n    <ComposableMap projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => (\n              <Geography\n                key={geo.rsmKey}\n                stroke=\"#FFF\"\n                geography={geo}\n                fill=\"#DDD\"\n              />\n            ))}\n            {geographies.map(geo => {\n              const centroid = geoCentroid(geo);\n              const cur = allStates.find(s => s.val === geo.id);\n              return (\n                  <g key={geo.rsmKey + \"-name\"}>\n                    {cur &&\n                      centroid[0] > -160 &&\n                      centroid[0] < -67 &&\n                      (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                        <Marker coordinates={centroid}>\n                          <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                            <a href=\"#\" onClick={handleClick}>\n                              {cur.id}\n                            </a>\n                          </text>\n                        </Marker>\n                      ) : (\n                        <Annotation\n                          subject={centroid}\n                          dx={offsets[cur.id][0]}\n                          dy={offsets[cur.id][1]}\n                        >\n                        \n                          <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                          <a href=\"#\" onClick={handleClick}>\n                              {cur.id}\n                            </a>\n                          </text>\n                          \n                        </Annotation>\n                      ))}\n                  </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n","/Users/louis/Programming/uscapitals/src/index.tsx",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":8,"column":20,"nodeType":"35","endLine":10,"endColumn":7},{"ruleId":"36","severity":1,"message":"37","line":58,"column":29,"nodeType":"38","endLine":58,"endColumn":63},{"ruleId":"36","severity":1,"message":"37","line":71,"column":27,"nodeType":"38","endLine":71,"endColumn":61},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]