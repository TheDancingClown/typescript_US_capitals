[{"/Users/louis/Programming/uscapitals/src/App.tsx":"1","/Users/louis/Programming/uscapitals/src/reportWebVitals.ts":"2","/Users/louis/Programming/uscapitals/src/index.tsx":"3","/Users/louis/Programming/uscapitals/src/components/Map/MapChart.tsx":"4","/Users/louis/Programming/uscapitals/src/environments.ts":"5","/Users/louis/Programming/uscapitals/src/components/map/MapChart.tsx":"6","/Users/louis/Programming/uscapitals/src/components/information/InformationDisplay.tsx":"7","/Users/louis/Programming/uscapitals/src/components/map/Map.tsx":"8","/Users/louis/Programming/uscapitals/src/components/map/dataGetter.ts":"9"},{"size":194,"mtime":1612802835531,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1612364241352,"results":"12","hashOfConfig":"11"},{"size":500,"mtime":1612364241350,"results":"13","hashOfConfig":"11"},{"size":2725,"mtime":1612793124850,"results":"14","hashOfConfig":"11"},{"size":253,"mtime":1612749091041,"results":"15","hashOfConfig":"11"},{"size":2469,"mtime":1612800917047,"results":"16","hashOfConfig":"11"},{"size":886,"mtime":1612811891039,"results":"17","hashOfConfig":"11"},{"size":592,"mtime":1612811995255,"results":"18","hashOfConfig":"11"},{"size":482,"mtime":1612811989787,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1671bok",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/louis/Programming/uscapitals/src/App.tsx",[],["41","42"],"/Users/louis/Programming/uscapitals/src/reportWebVitals.ts",[],"/Users/louis/Programming/uscapitals/src/index.tsx",[],"/Users/louis/Programming/uscapitals/src/components/Map/MapChart.tsx",["43","44","45","46"],"/Users/louis/Programming/uscapitals/src/environments.ts",[],"/Users/louis/Programming/uscapitals/src/components/map/MapChart.tsx",["47"],"import React from \"react\";\nimport { geoCentroid } from \"d3-geo\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\n\nimport allStates from \"../../data/allstates.json\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst offsets: any = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nconst MapChart = (props:any) => {\n\n  const handleClick = async (e:any,id: string) => {\n    e.preventDefault();\n    props.handler(id)\n  };\n\n  return (\n    <ComposableMap projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => (\n              <Geography\n                key={geo.rsmKey}\n                stroke=\"#FFF\"\n                geography={geo}\n                fill=\"#DDD\"\n              />\n            ))}\n            {geographies.map(geo => {\n              const centroid = geoCentroid(geo);\n              const cur = allStates.find(s => s.val === geo.id);\n              return (               \n                <g key={geo.rsmKey + \"-name\"}>\n                  {cur &&\n                    centroid[0] > -160 &&\n                    centroid[0] < -67 &&\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (                      \n                      <Marker coordinates={centroid}>                        \n                        <text y=\"2\" fontSize={14} textAnchor=\"middle\">\n                          <a href='#' onClick={(e) => handleClick(e,cur.objectID)}>\n                            {cur.id}\n                          </a>\n                        </text>\n                      </Marker>\n                    ) : (\n                      <Annotation\n                        subject={centroid}\n                        dx={offsets[cur.id][0]}\n                        dy={offsets[cur.id][1]}\n                      >\n                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                          <a href=\"_blank\" onClick={(e) => handleClick(e,cur.objectID)}>\n                            {cur.id}\n                          </a>\n                        </text>\n                      </Annotation>\n                    ))}\n                </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n","/Users/louis/Programming/uscapitals/src/components/information/InformationDisplay.tsx",["48"],"import React, { useEffect, useState } from 'react';\n\nimport './InformationDisplay.css';\n\nconst InformationDisplay = (props:any) => {\n\n  const [currentState, setCurrentState] = useState(\n    {\n      name: '',\n      capital:'', \n      population:'',\n      largestCity: '',\n      flag: ''});\n\n  useEffect(() => {\n    setCurrentState(props.currentState)\n  }, [props.currentState])\n\n  if(currentState.capital) {\n    return (\n      <div className=\"Display\">\n        <h2>{currentState.name}</h2>\n        <img className=\"Flag\" src={currentState.flag.replace(/16px|19px|20px|21px|22px|23px/, \"250px\")}/>\n        <h3>Capital: {currentState.capital}</h3>\n        <h3>Population: {currentState.population.toLocaleString()}</h3>\n        <h3>Largest City: {currentState.largestCity}</h3>\n      </div>\n    )\n  } else {\n  return <div className=\"Display\"></div>\n  }\n}\n\nexport default InformationDisplay\n","/Users/louis/Programming/uscapitals/src/components/map/Map.tsx",[],"/Users/louis/Programming/uscapitals/src/components/map/dataGetter.ts",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":26,"column":8,"nodeType":"55","messageId":"56","endLine":26,"endColumn":20},{"ruleId":"57","severity":2,"message":"58","line":26,"column":41,"nodeType":"55","endLine":26,"endColumn":49},{"ruleId":"53","severity":1,"message":"59","line":28,"column":10,"nodeType":"55","messageId":"56","endLine":28,"endColumn":25},{"ruleId":"60","severity":1,"message":"61","line":63,"column":27,"nodeType":"62","endLine":63,"endColumn":84},{"ruleId":"60","severity":1,"message":"61","line":57,"column":27,"nodeType":"62","endLine":57,"endColumn":84},{"ruleId":"63","severity":1,"message":"64","line":23,"column":9,"nodeType":"62","endLine":23,"endColumn":106},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'currentState' is assigned a value but never used.","Identifier","unusedVar","react-hooks/rules-of-hooks","React Hook \"useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.","'getCurrentState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]